@startuml

class CreateProjectController {
- projectCreationService
+ createProject(projectCreationDto)
}

CreateProjectController "1"<--.."1" ProjectCreationService: is injected
IFactoryProject "1" .-up-.> "1" ProjectCreationService: is injected
Project "*" <.-up-. "1" IFactoryProject: creates
ProjectCreationDto "1" <.-left-. "*" ProjectCreationService: uses
BusinessSectorRepository "1" ..|> "1" IBusinessSectorRepository: implements
TypologyRepository "1" ..|> "1" ITypologyRepository: implements
CustomerRepository "1" ..|> "1" ICustomerRepository: implements
ProjectRepository "1" .-up-.|> "1" IProjectRepository: implements
ProjectRepository "1" -left-> "*" Project: has
ProjectRepository "1" .left.> "*" ProjectCreationService: is injected
ICustomerRepository "1" ..> "1" ProjectCreationService: is injected
ITypologyRepository "1" ..> "1" ProjectCreationService: is injected
IBusinessSectorRepository "1" ..> "1" ProjectCreationService: is injected

class "CreateUsController" {
- usService
+ createUs(projectCodeOfInterest, userStoryCreationDto)
-convertListOfStringsToAnAcceptanceCriteriaList(userStoryCreationDto)
}

class "EstimateUserStoryEffortController" {
- userStoryInSprintService
+ estimateEffortUserStory(usId, effort, sprintId)
}

"EstimateUserStoryEffortController" "1" <.. "1" "UserStoryInSprintService": is injected
"SprintRepository" "1" ..|> "1" "ISprintRepository": implements
"ISprintRepository" "1" ..> "1" "UserStoryInSprintService": is injected
"SprintRepository" "1" --> "*" "Sprint": has
"Sprint" "1" --> "*" "UserStoryInSprint" : contains
"UserStoryInSprint" "1" --> "1" "Effort" : has

class "ConsultProductBacklogController" {
-projectService
+getProductBacklog(projectCode)
}

class "ProjectListController"{
-projectListService
+listAllProjects()
}

class ProjectCreationService {
- factoryProject
- projectRepository
- typologyRepository
- businessSectorRepository
- customerRepository
+ createProject(projectCreationDto)
+ calculateNextProjectNumber()
+ getProjectByCode(code)
+ addProject(project)
}

class "ProjectService"{
-factoryProject
-projectRepository
-usRepository
-userStoryMapper
+getProductBacklog(code)
+getProjectByCode(code)
+requestAllPlannedUserStories(usIds)
+userStoryToDtoList(userStories)
}

class "ProjectListService"{
-projectMapper
-projectRepository
-customerRepository
+requestAllProjects()
}

class "UserStoryCreationDto"{
+userStoryNumber
+userStoryText
+actor
+acceptanceCriteria
+priority
}

class "UserStoryInSprintService" {
- ISprintRepository sprintRepository;
+ estimateEffortUserStory(usId, effort, sprintId)
+ getSprintById(sprintId)
+ isSprintInValidPeriod(sprint, date)
}

class "UsService" {
- usRepository
- projectRepository
- factoryUserStory
+ createUs(userStoryNumber, userStoryText, actor,\n priority, acceptanceCriteria, projectCode)
+ deleteUs(usId)
+ addUsToProductBacklog(usId, projectCode, priority)
}

interface "IFactoryUserStory" {
+ createUserStory(userStoryNumber, userStoryText, actor,\n priority, acceptanceCriteria, projectCode)
}

class "FactoryUserStory"{
+ createUserStory(usNumber, usText, actor,\n priority, acceptanceCriteria, projectCode)
}

interface "IProjectRepository"{
+getProjectByCode(code)
+addProjectToProjectRepository(project)
+findAll()
}

class "ProjectRepository"{
- projects
+getProjectByCode(code)
+findAll()
+ addProjectToProjectRepository(project)
}

interface "IUsRepository"{
+add(userStory)
+delete(usId)
+getListOfUsWithMatchingIds(usIds)
}

class "UsRepository"{
-userStories
+getListOfUsWithMatchingIds(usIds)
+add(userStory)
+delete(usId)
}

class BusinessSectorRepository{
- businessSectors
+ getBusinessSectorIdByName(businessSectorName)
}

interface IBusinessSectorRepository {
getBusinessSectorIdByName(businessSectorName)
}

class "CustomerRepository"{
-customers
+getCustomerNameByTaxId(taxId)
+getCustomerTaxIdByName(customerName)
}

interface "ICustomerRepository"{
+getCustomerNameByTaxId(taxId)
+getCustomerTaxIdByName(customerName)
}

class TypologyRepository{
- typologies
+ getProjectTypologyIdByName(typologyName)
}

interface ITypologyRepository {
getProjectTypologyIdByName(typologyName)
}

class "SprintRepository" {
- sprints
+ estimateEffortUserStory(usId, effort, sprintId)
+ getSprintById(sprintId)
}

interface "ISprintRepository"{
+ estimateEffortUserStory(usId, effort, sprintId)
+ getSprintById(sprintId)
}

class "Sprint"{
- sprintId
- userStoriesInSprint
+ estimateEffortUserStory(usId, effort) {
}
class "UserStoryInSprint" {
- userStories
- getUsId()
+ changeEffort(effortEstimate)
}

enum "Effort"{
- effortValue
+ getEffortValue(effortValue)
}

interface IFactoryProject {
createProject(projectNumber, projectName, description,
businessSectorId, customerTaxId, projectTypologyId)
}

class "UserStoryMapper"{
+userStoryToDto(userStory)
+userStoryToDtoList(userStories)
}

class "ProjectMapper"{
+projectToDto()
}

class "ProductBacklog"{
-userStories
#getUserStories()
}

class "Project"{
-projectCode
-customerTaxId
-projectName
-projectStatus
-period
-productBacklog
- description
- businessSectorId
- projectTypologyId
+hasProjectCode(projectCode)
+getProductBacklog()
+ addUserStory(priority, usId)
+ getProjectCode()
+getCustomerTaxId()
+getProjectName()
+getProjectStatus()
+getStartDate()
+getEndDate()
}

class "UserStory"{
- usId
- acceptanceCriteria
- usNumber
- actor
- usText
- status
+ getUsNumber()
+getUsText()
+getStatus()
}

class "UserStoryDto"{
+userStoryNumber
+userStoryText
+status
}

class ProjectCreationDto{
+ code
+ name
+ status
+ customer
+ projectTypology
+ businessSector
}

class "ProjectDto"{
+code
+projectName
+customerName
+status
+startDate
+endDate
}

"CreateUsController" .> "UserStoryCreationDto": accesses
"CreateUsController" "1"<.."1" "UsService": is injected

"UsService" "1" <.. "1" "IFactoryUserStory": is injected
"IFactoryUserStory" <|.. "FactoryUserStory": implements
"FactoryUserStory" "1"..>"*" "UserStory": creates

class CreateTypologyController {
- typologyService
+ createTypology(name)
}

class TypologyService{
- typologyRepository
- typologyFactory
+ createTypology(name)
}

interface ITypologyFactory{
+ createTypology(typologyNumber, typologyName)
}

class TypologyFactory{
+ createTypology(typologyNumber, typologyName)
}

interface ITypologyRepository{
+ add(typology)
}

class TypologyRepository{
+ add(typology)
}

class Typology{
- typologyId
- typologyName
# Typology(typologyNumber, typologyName)
}

CreateTypologyController <.. TypologyService: is injected
TypologyService <.. ITypologyRepository: is injected
TypologyService <.. ITypologyFactory: is injected
ITypologyFactory <|.. TypologyFactory: implements
TypologyFactory ..> Typology: creates
ITypologyRepository <|.. TypologyRepository: implements
TypologyRepository --> Typology: has

class CreateBusinessSectorController {
- businessSectorService
+ createBusinessSector(name)
}

class BusinessSectorService{
- businessSectorRepository
- businessSectorFactory
+ createBusinessSector(name)
}

interface IBusinessSectorFactory{
+ createBusinessSector(businessSectorNumber, businessSectorName)
}

class BusinessSectorFactory{
+ createBusinessSector(businessSectorNumber, businessSectorName)
}

interface IBusinessSectorRepository{
+ add(businessSector)
}

class BusinessSectorRepository{
+ add(businessSector)
}

class BusinessSector{
- businessSectorId
- businessSectorName
# businessSector(businessSectorNumber, businessSectorName)
}

CreateBusinessSectorController <.. BusinessSectorService: is injected
BusinessSectorService <.. IBusinessSectorRepository: is injected
BusinessSectorService <.. IBusinessSectorFactory: is injected
IBusinessSectorFactory <|.. BusinessSectorFactory: implements
BusinessSectorFactory ..> BusinessSector: creates
IBusinessSectorRepository <|.. BusinessSectorRepository: implements
BusinessSectorRepository --> BusinessSector: has

"UsService" "1" <.. "1" "IProjectRepository": is injected
"IProjectRepository" <|.. "ProjectRepository": implements
"ProjectRepository" "1"-->"*" "Project": has

"UsService" "1" <.. "1" "IUsRepository": is injected
"IUsRepository" <|.. "UsRepository": implements
"UsRepository" "1"-->"*" "UserStory": has

"UsService" ..> "UserStory": uses
"UsService" ..> "Project": uses

"GetProductBacklogController" "1"<.."1" "ProjectService":  is injected
"Project" "1"-->"1" "ProductBacklog": has
"ProductBacklog" "1"-->"*" "UserStory": has
"GetProductBacklogController" "1"-->"1" "UserStoryMapper" : has
"UserStoryMapper" "1 "..> "*" "UserStoryDto" : creates
"UserStoryMapper" ..> "UserStory" : knows

"ProjectService" <.. "IProjectRepository" : is injected
"ProjectService" <.. "IUsRepository" : is injected

"ProjectListController" "1"<.."1" "ProjectListService": is injected
"ProjectListService" "1"<.."1" "IProjectRepository": is injected
"ProjectRepository" "1" ..|> "1" "IProjectRepository": implements
"ProjectListService" "1"<.right."1" "ICustomerRepository": is injected
"CustomerRepository" "1" ..|> "1" "ICustomerRepository": implements
"ProjectListService" "1" ..> "*" "Project": uses
"ProjectMapper" "1" .up.> "1" "ProjectListService": is injected
"ProjectMapper" "1" ..> "*" "Project": uses
"ProjectDto" "*" <.up. "1" "ProjectMapper": uses
"Project" "*" <-down- "1" "ProjectRepository": has

class RegisterAccountController {
- accountService
+ registerAccount (accountCreationDto)
}

class AccountChangeStatusService{
- accountRepository
+changeStatus(email, status)

}

class AccountCreationService{
- accountRepository
- accountFactory
+ registerAccount(name, email, phoneNumber, photo)
}

interface IAccountFactory{
+ createAccount(name, email, phoneNumber, photo)
}

class AccountFactory{
+ createAccount(name, email, phoneNumber, photo)
}

interface IAccountRepository{
+ add(account)
+getAccountByEmail(email)
+getAccounts()
}

class AccountRepository{
+ add(account)
+getAccountByEmail(email)
+getAccounts()
}

class Account{
- name
- email
-phoneNumber
- accountStatus
-photo
-profile
+changeStatus(status)
+hasEmail(email)
+getName()
+getEmail()
+getAccountStatus()
+changeProfile(profile)
}

class AccountListService{
-accountRepository
+listAllAccounts()
}



RegisterAccountController <.. AccountCreationService: is injected
AccountCreationService <|.. IAccountFactory : is injected
AccountCreationService <|.. IAccountRepository : is injected
AccountChangeStatusService <.. IAccountRepository: is injected
AccountChangeStatusService <.. IAccountFactory: is injected
IAccountFactory <|.. AccountFactory: implements
AccountFactory ..> Account: creates
IAccountRepository <|.. AccountRepository: implements
AccountRepository "1"->"*" Account: has


class ChangeStatusController {
-accountService
+changeStatus(email, status)
}

ChangeStatusController"1 " <.. "1 "AccountChangeStatusService : is injected

class ListAccountController {
-accountService
-accountMapper
+listAllAccounts()
+accountToDtoList(accounts)
}

class AccountMapper {
+accountToDto(account)
+accountsToDtoList(accounts)
}

class AccountDto{
+name
+email
+status
}
AccountListService <|.. AccountRepository : is injected
ListAccountController"1" <.. "1"AccountListService : is injected
AccountListService "1"--> "1"AccountMapper : has
AccountMapper --> AccountDto : creates
AccountMapper ..> Account : knows

class "CreateProfileController" {
- profileService
+ createProfile(profileName)
}

class ProfileService{
- profileRepository
- profileFactory
+ createProfile(profileName)
+ calculateNextProfileNumber()
}

interface IProfileFactory{
+ createProfile(profileName, idProfileNumber)
}

class ProfileFactory{
+ createProfile(profileName, idProfileNumber)
}

interface IProfileRepository{
+ add(profile)
+ getSize()
+ getProfileByName(profileName)
}

class ProfileRepository{
+ add(profile)
+ getSize()
+ getProfileByName(profileName)
}

class Profile<<root>>{
- profileName
+hasName(profileName)
}

CreateProfileController <.. ProfileService: is injected
ProfileService <.. IProfileRepository: is injected
ProfileService <.. IProfileFactory: is injected
IProfileFactory <|.. ProfileFactory: implements
ProfileFactory ..> Profile: creates
IProfileRepository <|.. ProfileRepository: implements


class AddCustomerController {
-customerService
+addCustomer(taxIdNumber, name)
}

class CustomerService {
-iCustomerRepository
-iCustomerFactory
+addCustomer(taxIdNumber, name)
}

interface ICustomerFactory {
+createCustomer(taxId, name)
}

class CustomerFactory {
+createCustomer(taxId, name)
}

interface ICustomerRepository {
+add(customer)
}

class CustomerRepository {
+add(customer)
}

class Customer {
-taxId
-name
#Customer(taxId, name)
}

AddCustomerController <.. CustomerService: is injected
CustomerService <.. ICustomerRepository: is injected
CustomerService <.. ICustomerFactory: is injected
ICustomerFactory <|.. CustomerFactory: implements
CustomerFactory ..> Customer: creates
ICustomerRepository <|.. CustomerRepository: implements
CustomerRepository --> Customer: has

class ChangeProfileController {
-changeProfileService
+changeProfile(email, profileName)
}

class ChangeProfileService {
-accountRepository
-profileRepository
+changeProfile(email, profileName)
}

ProfileRepository "1"->"*" Profile: has
ChangeProfileController"1 " <.. "1 "ChangeProfileService: is injected
IAccountRepository ..> ChangeProfileService : is injected
IProfileRepository ..> ChangeProfileService : is injected

@enduml

