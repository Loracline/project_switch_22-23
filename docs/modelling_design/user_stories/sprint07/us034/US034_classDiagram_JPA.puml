@startuml

skinparam sequenceMessageAlign center
title TO CLOSE THE CURRENT/ACTIVE SPRINT OF A PROJECT IN THE WEB UI.
legend top
US034 - As Project Manager, I want to close the current/active sprint of a project in the web UI.
end legend


class SprintWebController {
- sprintStatusChangeService
+ changeSprintStatus(sprintStatusDto)
}
SprintWebController <.. SprintStatusChangeService: is injected
SprintWebController <..SprintStatusChangeDto: uses

class SprintStatusChangeService {
- sprintRepository
- userStoryRepository
+ changeStatus(status)
- isOpen(sprint)
}
SprintStatusChangeService ..> SprintStatusChangeDto: uses
SprintStatusChangeService <.. ISprintRepository: is injected
SprintStatusChangeService <.. IUserStoryRepository: is injected

interface ISprintRepository {
+ findById(sprintId)
+ existsByStatus(status)
}
ISprintRepository <|.. SprintRepositoryJpa: implements

class SprintRepositoryJpa {
- iSprintJpaRepository
- sprintDomainDataAssembler
+ findById(sprintId)
+ existsByStatus(sprintStatus)
}
SprintRepositoryJpa <.. ISprintJpaRepository: is injected
SprintRepositoryJpa <.. SprintDomainDataAssembler: is injected
SprintRepositoryJpa "1"--> "*"SprintJpa: has

interface ISprintJpaRepository {
+ findById(sprintId)
+ existsByStatus(sprintStatus)
}
ISprintJpaRepository <|-- CrudRepository: extends

interface ISprintFactory{
+ createSprint(projectCode, sprintId, sprintNumber, period)
}
ISprintFactory <|.. SprintFactory: implements

class SprintFactory{
+ createSprint(projectCode, sprintId, sprintNumber, period)
}
SprintFactory ..> Sprint: creates

class Sprint {
- sprintId
- status
+ changeStatus(status)
+ getStatus()
}

class SprintJpa {
- sprintId
- status
}

class SprintDomainDataAssembler{
- factory
+ toData(sprint)
+ toDomain(sprintJpa)
}
SprintDomainDataAssembler ..> SprintJpa: creates
SprintDomainDataAssembler <.. ISprintFactory: is injected

interface IUserStoryRepository {
+ getListOfUsWithMatchingIds(usId)
}
IUserStoryRepository <|.. UserStoryRepositoryJpa: implements

class UserStoryRepositoryJpa {
- iUserStoryJpaRepository
- userStoryDomainDataAssembler
+ findById(usId)
}
UserStoryRepositoryJpa <.. IUserStoryJpaRepository: is injected

interface IUserStoryJpaRepository {
+ findById(usId)
}
IUserStoryJpaRepository <|-- CrudRepository: extends

interface IFactoryUserStory{
+ createUserStory(usNumber, usText, actor, acceptanceCriteria, projectCode)
}
IFactoryUserStory <|.. FactoryUserStory: implements

class FactoryUserStory{
+ createUserStory(usNumber, usText, actor, acceptanceCriteria, projectCode)
}
FactoryUserStory ..> UserStory: creates

class UserStory {
- usId
- status
+ changeStatus(status)
+ hasStatus(status)
}

class UserStoryJpa {
- usId
- status
}

class UserStoryDomainDataAssembler{
- factory
+ toData(userStory))
+ toDomain(userStoryJpa)
}
UserStoryDomainDataAssembler ..> UserStoryJpa: creates
UserStoryDomainDataAssembler <.. IFactoryUserStory: is injected

class SprintStatusChangeDto {
+ sprintId
+ status
}

interface CrudRepository {
}

@enduml