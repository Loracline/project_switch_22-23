@startuml
class AddBusinessSectorController {
-company
+addBusinessSector(businessSectorName, email)
}

class AddCustomerController {
-company
+addCustomer(customerName, customerNIF, email)
}

class AddUserToProjectController {
-company
+addUserToProject(emailActor, accountDTO, projectDtoAsManager, allocationDTO)
}

class ChangeProfileController {
-company
+changeProfile(email, profileName, actorEmail)
}

class ChangeStatusController {
-company
+changeStatus(email, status, actorEmail)
}

class CreateProfileController {
-company
+createProfile(profileName, actorEmail)
}

class CreateProjectTypologyController {
- company
+createProjectTypology(email, projectTypology)
}

class GetListOfProjectsController {
-company
+getListOfProjects(email)
}

class ListAccountController {
-company
+listAllAccounts(actorEmail)
}

class ListAccountsInProjectController {
-company
+listAccountsByProject(emailManager, projectCode)
}

class ListAllUsersController {
-company
+listAllUsers(actorEmail)
}

class ListProjectsInAccountController {
- company
+ listProjectsByAccount(emailUser)
}

class RegisterAccountController {
-company
+registerAccount(name, email, phoneNumber, photo, actorEmail)
}

class RegisterProjectController {
- company
+ registerProject(projectDto, email)
}


class Company {
-accountContainer
-profileContainer
-projectContainer
-businessSectorContainer
-projectTypologyContainer
-accountInProjectContainer
-customerContainer
+getAccountContainer()
+validateProfileRequired(email, profileNameRequired)
+createProfile(profileName)
+changeProfile(email, profileName)
+listAllUsers()
+registerAccount(accountName, email, phoneNumber, photo)
+changeStatus(email, status)
+registerProject(projectDto)
+listAllProjects()
+addBusinessSector(businessSectorName)
+addCustomer(customerName, customerNIF)
+createProjectTypology(projectTypology)
+addUserToProject(accountDTO, projectDtoAsManager,allocationDTO)
+listAccountsByProject(projectCode)
+listProjectsByAccount(emailUser)
}


class AccountContainer {
-accounts
+getAccounts()
+getAccountByEmail(email)
+validateProfileRequired(email, profileNameRequired)
+doesEmailExist(email)
+addAccount(name, email, phoneNumber, photo)
+changeStatus(email, status)
+listAllUsers()
+doesAccountExist(account)
}

class AccountInProjectContainer {
-accountsInProject
+addUserToProject(account, project, allocationDTO)
+removeIncompleteAccountInProject(account, Project project)
-getIncompleteAccountInProject(account, Project project)
-isAccountInProjectValid(accountInProject)
-isAccountInProjectNotInList(accountInProject)
-isPeriodOverlapping(startDateOne,endDateOne,startDateTwo, endDateTwo)
-isScrumMasterOrProductOwnerUnique(accountInProject)
-isPeriodValid(newAccountInProject,existingAccountInProject)
+addUserToProject(account, project)
-currentPercentageOfAllocation(account)
-isAccountTheSame(account,i)
-doesPeriodIncludeCurrentDate(i)
-isTotalPercentageOfAllocationValid(account, newPercentageAllocation)
+listAccountsByProject(projectCode)
+listProjectsByAccount(email)
}

class BusinessSectorContainer {
-businessSectors
-doesBusinessSectorExist(businessSector)
+createBusinessSector(businessSectorName)
+getBusinessSector(businessSector)
}

class CustomerContainer {
-customers
-doesCustomerNIFExist(customerNIF)
+addCustomer(customerName, customerNIF)
-isValidNIF(customerNIF)
+getCustomer(customerName, nif)
}

class ProfileContainer {
-profiles
+doesProfileExist(profile)
+createProfile(name)
+getProfileByName(profileName)
}

class ProjectContainer {
-projects
+getProjectByCode(code)
+getProjects()
+registerProject(projectDtoAsManager)
-doesProjectExist(project)
}

class ProjectTypologyContainer {
-typologies
+doesTypologyExist(projectTypology)
+createProjectTypology(projectTypology)
+getProjectTypology(typology)
}


class Account {
-accountName
-email
-phoneNumber
-profile
-accountStatus
-photo
+Account(accountName, email, phoneNumber, profile, accountStatus, photo)
+getEmail()
+getAccountName()
+isAccountStatus()
+getProfile()
+setProfile(profileContainer, profileName)
+setPhoto(photo)
+setStatus(status)
+checkAccountFromEmail(email)
+isProfileRequired(profileNameRequired)
}

class AccountInProject {
-account
-project
-role
-startDate
-costPerHour
-percentageAllocation
-endDate
+AccountInProject(account, project, role, costPerHour, percentageAllocation, startDate, endDate)
+AccountInProject(account, project)
+isRoleValid()
+getPercentageOfAllocation()
+getRole()
+isPercentageOfAllocationValid(percentageOfAllocation)
+getAccountByProject(projectCode)
+getAccount()
+getProject()
+getEndDate()
+getStartDate()
-hasProject(projectCode)
+getProjectByAccount(email)
-validate(email)
+isStartDateBeforeNow()
+isEndDateAfterNow()
+isEndDateValid()
+hasProject(project)
+hasAccount(account)
+isAccountInProjectIncomplete(account, project)
+isScrumMasterOrProductOwner()
+isRoleEmpty()
}

class BusinessSector {
-businessSectorName
+BusinessSector(businessSectorName)
+getBusinessSectorName()
}

class Customer {
-customerName
-customerNif
+Customer(customerName, customerNIF)
+getCustomerNif()
+getCustomerName()
}

class Profile {
-profileName
+Profile(profileName)
+isProfileRequired(profileNameRequired)
}

class Project {
-projectCode
-projectName
-customer
-projectTypology
-businessSector
-projectStatus
+Project(projectCode, name, customer, projectTypology, businessSector)
+getProjectCode()
+getProjectName()
+getCustomer()
+getCustomer()
+getProjectStatus()
+setProjectStatus(status)
+getProjectTypology()
+getBusinessSector()
+hasProjectCode(projectCode)
+isProjectOpen()
}

class ProjectTypology {
-projectTypologyName
+ProjectTypology(projectTypologyName)
+getProjectTypologyName()
+checkProjectTypologyFromName(projectTypologyName)
}

class AccountListEmailStatusMapper{
-accountToDTO(account)
+listAccountsToDTO(accounts)
}

class AccountMapper {
+accountToDTO(account)
+listAccountsToDTO(accounts)
}

class ManagerListProjectsMapper {
+getDTOFromProject(project)
+getListOfProjectsDTO(projects)
}

class ProjectMapper {
+ getProjectFromDTO(projectDtoAsManager)
}

class AccountDTO {
+name
+email
+status
+AccountDTO(name, email, status)
}

class AccountEmailStatusDTO{
+AccountEmailStatusDTO(email, status)
}

class AllocationDTO {
+role
+costPerHour
+percentageAllocation
+startDate
+endDate
+AllocationDTO(role, costPerHour, percentageAllocation, startDate, endDate)
}

class ManagerListProjectsDTO {
+code
+name
+customer
+status
+projectTypology
+businessSector
+ManagerListProjectsDTO(code, name, customer, status, projectTypology, businessSector)
}

class ProjectDtoAsManager {
+ code
+ name
+ customerName
+ customerNif
+ status
+ projectTypology
+ businessSector
+ProjectDtoAsManager(code, name, customerName, customerNif, projectTypology, businessSector)
}

'Company Containers link'
"Company" "1"-->"1" "ProfileContainer": has
"Company" "1"-->"1" "AccountContainer" : has
"Company" "1"-->"1" "ProjectTypologyContainer" : has
"Company" "1"-->"1"  "BusinessSectorContainer"
"Company" "1"-->"1" "CustomerContainer": has
"Company" "1"-->"1" "AccountInProjectContainer": has
"Company" "1"-->"1" "ProjectContainer": has

'Container model link'
"ProfileContainer" "1" --> "*" "Profile": contains
"AccountContainer" "1"--> "*" "Account" :has
"ProjectTypologyContainer" "1"-->"*" "ProjectTypology" : has
"BusinessSectorContainer" "1"-->"*"  "BusinessSector"
"CustomerContainer" "1"-->"*" "Customer": has
"AccountInProjectContainer" "1"--> "*" "AccountInProject" : has
"ProjectContainer" "1"-->"*" "Project": contains

'Account Profile Link'
"Account" "*"--> "1""Profile": contains

'US016'
"ManagerListProjectsMapper" ..> "Project"
"ListProjectInAccountController"-->"Company"
"ListProjectInAccountController"..> "ManagerListProjectsMapper"
"ManagerListProjectsMapper"..> "ManagerListProjectsDTO"

'US015'
"GetListOfProjectsController" "1"-->"1" "Company": has
"GetListOfProjectsController" ..> "ManagerListProjectsMapper"
"ManagerListProjectsMapper" ..> "ManagerListProjectsDTO": <<instantiate>>

'US014'
"ListAccountsInProjectController" --> "Company"
"ListAccountsInProjectController" ..> "AccountMapper"
"AccountMapper" ..> "AccountDTO"
"AccountMapper"..>"Account"
"AccountInProject" "1"-->"1" "Project": has

'US011_US012_US013'
"AddUserToProjectController" "1"-->"1" "Company" :has

'US010'
"RegisterProjectController" "1"-->"1" "Company": has
"ProjectMapper" ..> "ProjectDtoAsManager"
"ProjectContainer" ..> "ProjectMapper"
"RegisterProjectController" ..> "ProjectMapper"
"ProjectMapper" ..> "Project"
"ProjectContainer" "1" -left-> "*" "Project" : contains

'US009'
"AddCustomerController" "1"-->"1" "Company" : has

'US008'
"AddBusinessSectorController" "1"-->"1" "Company" : has

'US007'
"CreateProjectTypologyController""1"-->"1" "Company": has

'US006' 'US005'
"ChangeStatusController" --> "Company"

'US004'
"ListAccountController" --> "Company"

'US003'
"ChangeProfileController" "1"-->"1" "Company"

'US002'
"RegisterAccountController" "1" --> "1" "Company": has

'US001'
"CreateProfileController" "1"-->"1"  "Company" : has
@enduml