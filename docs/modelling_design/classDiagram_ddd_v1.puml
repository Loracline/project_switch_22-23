@startuml


class "CreateUsController" {
- usService
+ createUs(projectCodeOfInterest, userStoryCreationDto)
-convertListOfStringsToAnAcceptanceCriteriaList(userStoryCreationDto)
}

class "GetProductBacklogController" {
-projectService
-userStoryMapper
+getProductBacklog(projectCode)
}

class "ProjectService"{
-factoryProject
-projectRepository
-factoryProductBacklog
-usRepository
+getProductBacklog(code)
+getProjectByCode(code)
+requestAllPlannedUserStories(usIds)
}

class "UserStoryCreationDto"{
+userStoryNumber
+userStoryText
+actor
+acceptanceCriteria
+priority
}

class "UsService" {
- usRepository
- projectRepository
- factoryUserStory
+ createUs(userStoryNumber, userStoryText, actor,\n priority, acceptanceCriteria, projectCode)
+ deleteUs(usId)
+ addUsToProductBacklog(usId, projectCode, priority)
}

interface "IFactoryUserStory" {
+ createUserStory(userStoryNumber, userStoryText, actor,\n priority, acceptanceCriteria, projectCode)
}

class "FactoryUserStory"{
+ createUserStory(usNumber, usText, actor,\n priority, acceptanceCriteria, projectCode)
}

interface "IProjectRepository"{
+getProjectByCode(code)
}

class "ProjectRepository"{
- projects
+getProjectByCode(code)
}

interface "IUsRepository"{
+add(userStory)
+delete(usId)
+getListOfUsWithMatchingIds(usIds)
}

class "UsRepository"{
-userStories
+getListOfUsWithMatchingIds(usIds)
+add(userStory)
+delete(usId)
}

class "UserStoryMapper"{
+userStoryToDto(userStory)
+userStoryToDtoList(userStories)
}

class "ProductBacklog"{
-userStories
#getUserStories()
}

class "Project"{
-projectCode
-productBacklog
+hasProjectCode(projectCode)
+getProductBacklog()
+ addUserStory(priority, usId)
+ getProjectCode()
}

class "UserStory"{
- usId
- acceptanceCriteria
- usNumber
- actor
- usText
- status
+ getUsNumber()
+getUsText()
+getStatus()
}

class "UserStoryDto"{
+userStoryNumber
+userStoryText
+status
}


"CreateUsController" .> "UserStoryCreationDto": accesses
"CreateUsController" "1"<.."1" "UsService": is injected

"UsService" "1" <.. "1" "IFactoryUserStory": is injected
"IFactoryUserStory" <|.. "FactoryUserStory": implements
"FactoryUserStory" "1"..>"*" "UserStory": creates


"UsService" "1" <.. "1" "IProjectRepository": is injected
"IProjectRepository" <|.. "ProjectRepository": implements
"ProjectRepository" "1"-->"*" "Project": has

"UsService" "1" <.. "1" "IUsRepository": is injected
"IUsRepository" <|.. "UsRepository": implements
"UsRepository" "1"-->"*" "UserStory": has

"UsService" ..> "UserStory": uses
"UsService" ..> "Project": uses

"GetProductBacklogController" "1"<.."1" "ProjectService":  is injected
"Project" "1"-->"1" "ProductBacklog": has
"ProductBacklog" "1"-->"*" "UserStory": has
"GetProductBacklogController" "1"-->"1" "UserStoryMapper" : has
"UserStoryMapper" "1 "..> "*" "UserStoryDto" : creates
"UserStoryMapper" ..> "UserStory" : knows
"ProjectService" <.. "IProjectRepository" : is injected
"ProjectService" <.. "IUsRepository" : is injected



@enduml

