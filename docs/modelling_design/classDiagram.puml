@startuml
class AddBusinessSectorController {
-company
+addBusinessSector(businessSectorName, email)
}

class AddCustomerController {
-company
+addCustomer(customerName, customerNIF, email)
}

class AddUserToProjectController {
-company
+addUserToProject(emailActor, accountDTO, projectCreationDto, allocationDTO)
}

class "AddUserStoryToSprintBacklogController" {
- company
+ addUserStoryToSprintBacklog(userStoryDto, sprintNumber)
}

class ChangeProfileController {
-company
+changeProfile(email, profileName, actorEmail)
}

class ChangeStatusController {
-company
+changeStatus(email, status, actorEmail)
}

class CreateProfileController {
-company
+createProfile(profileName, actorEmail)
}

class CreateProjectTypologyController {
-company
+createProjectTypology(email, projectTypology)
}

class CreateSprintController {
-company
+createSprint(projectDto,sprintDto)
}

class EstimateUserStoryEffortController{
-company
+estimateEffortUserStory(userStoryDto, effort)
}

class GetListOfProjectsController {
-company
+getListOfProjects(email)
}

class "GetProductBacklogController" {
-company
+getProductBacklog(projectDto)
}

class ListAccountController {
-company
+listAllAccounts(actorEmail)
}

class ListAccountsInProjectController {
-company
+listAccountsByProject(emailManager, projectCode)
}

class ListAllUsersController {
-company
+listAllUsers(actorEmail)
}

class ListProjectsInAccountController {
-company
+listProjectsByAccount(emailUser)
}

class RegisterAccountController {
-company
+registerAccount(name, email, phoneNumber, photo, actorEmail)
}

class RegisterProjectController {
-company
+registerProject(projectCreationDto, email)
}

class ViewScrumBoardController {
-company
+getScrumBoard(projectDto)
}

class Company {
-accountContainer
-profileContainer
-projectContainer
-businessSectorContainer
-projectTypologyContainer
-accountInProjectContainer
-customerContainer
+getAccountContainer()
+validateProfileRequired(email, profileNameRequired)
+createProfile(profileName)
+changeProfile(email, profileName)
+listAllUsers()
+registerAccount(accountName, email, phoneNumber, photo)
+changeStatus(email, status)
+registerProject(projectCreationDto)
+listAllProjects()
+addBusinessSector(businessSectorName)
+addCustomer(customerName, customerNIF)
+createProjectTypology(projectTypology)
+addUserToProject(accountDTO, projectCreationDto,allocationDTO)
+listAccountsByProject(projectCode)
+listProjectsByAccount(emailUser)
+addUserStoryToSprintBacklog(userStoryDto, sprintNumber)
+createSprint(projectDto,sprintDto)
+getScrumBoard(projectDto)
-userStoryContainer
+createUserStory(projectDto,userStoryCreationDto)
+getProductBacklog(projectDto)
+estimateEffortUserStory(userStoryDto, effort)
}


class AccountContainer {
-accounts
+getAccounts()
+getAccountByEmail(email)
+validateProfileRequired(email, profileNameRequired)
+doesEmailExist(email)
+addAccount(name, email, phoneNumber, photo)
+changeStatus(email, status)
+listAllUsers()
+doesAccountExist(account)
}

class AccountInProjectContainer {
-accountsInProject
+addUserToProject(account, project, allocationDTO)
+removeIncompleteAccountInProject(account, Project project)
-getIncompleteAccountInProject(account, Project project)
-isAccountInProjectValid(accountInProject)
-isAccountInProjectNotInList(accountInProject)
-isPeriodOverlapping(startDateOne,endDateOne,startDateTwo, endDateTwo)
-isScrumMasterOrProductOwnerUnique(accountInProject)
-isPeriodValid(newAccountInProject,existingAccountInProject)
+addUserToProject(account, project)
-currentPercentageOfAllocation(account)
-isAccountTheSame(account,i)
-doesPeriodIncludeCurrentDate(i)
-isTotalPercentageOfAllocationValid(account, newPercentageAllocation)
+listAccountsByProject(projectCode)
+listProjectsByAccount(email)
}

class BusinessSectorContainer {
-businessSectors
-doesBusinessSectorExist(businessSector)
+createBusinessSector(businessSectorName)
+getBusinessSector(businessSector)
}

class CustomerContainer {
-customers
-doesCustomerNIFExist(customerNIF)
+addCustomer(customerName, customerNIF)
-isValidNIF(customerNIF)
+getCustomer(customerName, nif)
}

class "CreateUserStoryController" {
- company
+ createUserStory(projectDto,userStoryCreationDto)
}

class ProfileContainer {
-profiles
+doesProfileExist(profile)
+createProfile(name)
+getProfileByName(profileName)
}

class ProjectContainer {
-projects
+getProjects()
+registerProject(ProjectCreationDto)
-doesProjectExist(project)
+estimateEffortUserStory(userStoryDto, effort)
+addUserStoryToSprintBacklog(userStoryDto, sprintNumber)
-getProjectByProjectCode(projectCode)
+createSprint(sprintDto)
-getProjectByCode(projectDto)
+getScrumBoard(projectDto)
+ createUserStory(projectDto,userStoryCreationDto)
-getProjectByCode(projectCode)
+getProductBacklog(projectDto)
}

class ProjectTypologyContainer {
-typologies
+doesTypologyExist(projectTypology)
+createProjectTypology(projectTypology)
+getProjectTypology(typology)
}

class Account {
-accountName
-email
-phoneNumber
-profile
-accountStatus
-photo
+Account(accountName, email, phoneNumber, profile, accountStatus, photo)
+getEmail()
+getAccountName()
+isAccountStatus()
+getProfile()
+setProfile(profileContainer, profileName)
+setPhoto(photo)
+setStatus(status)
+checkAccountFromEmail(email)
+isProfileRequired(profileNameRequired)
}

class AccountInProject {
-account
-project
-role
-startDate
-costPerHour
-percentageAllocation
-endDate
+AccountInProject(account, project, role, costPerHour, percentageAllocation, startDate, endDate)
+AccountInProject(account, project)
+isRoleValid()
+getPercentageOfAllocation()
+getRole()
+isPercentageOfAllocationValid(percentageOfAllocation)
+getAccountByProject(projectCode)
+getAccount()
+getProject()
+getEndDate()
+getStartDate()
-hasProject(projectCode)
+getProjectByAccount(email)
-validate(email)
+isStartDateBeforeNow()
+isEndDateAfterNow()
+isEndDateValid()
+hasProject(project)
+hasAccount(account)
+isAccountInProjectIncomplete(account, project)
+isScrumMasterOrProductOwner()
+isRoleEmpty()
}

class BusinessSector {
-businessSectorName
+BusinessSector(businessSectorName)
+getBusinessSectorName()
}

class Customer {
-customerName
-customerNif
+Customer(customerName, customerNIF)
+getCustomerNif()
+getCustomerName()
}

class Period {
-startDate
-endDate
-calculateEndDate( startDate, sprintDuration)
+Period(startDate, sprintDuration)
+getStartDate()
+getEndDate()
}

class Profile {
-profileName
+Profile(profileName)
+isProfileRequired(profileNameRequired)
}

class Project {
-projectCode
-projectName
-customer
-projectTypology
-businessSector
-projectStatus
-productBacklog
-factorySprint
-sprints
+Project(projectCode, name, customer, projectTypology, businessSector)
+getProjectCode()
+getProjectName()
+getCustomer()
+getCustomer()
+getProjectStatus()
+setProjectStatus(status)
+getProjectTypology()
+getBusinessSector()
-hasProjectCode(projectCode)
+isProjectOpen()
+estimateEffortUserStory(userStoryDto, effort)
+addUserStoryToSprintBacklog(userStoryNumber, sprintNumber)
+hasProjectCode(projectCode)
-getSprint(sprintNumber)
+createSprint(sprintNumber,\n startDate, projectCode)
+isSprintUnique(sprint)
+isPeriodValid(sprint, existingSprint)
+getScrumBoard()
+createUserStory(userStoryCreationDto)
+getProductBacklog()
+hasProjectCode(projectCode)
}

class ProjectTypology {
-projectTypologyName
+ProjectTypology(projectTypologyName)
+getProjectTypologyName()
+checkProjectTypologyFromName(projectTypologyName)
}

class "Sprint"{
-sprintNumber
-factoryPeriod
-period
-sprintBacklog
+Sprint(sprintNumber, factoryPeriod)
+addUserStoryToSprintBacklog(userStory)
+estimateEffortUserStory(userStoryDto, effort)
+createPeriod(startDate,sprintDuration)
+getStartDate()
+getEndDate()
+getSprintBacklog()
+hasUserStory(userStoryNumber)

}

class "ProductBacklog" {
-userStories
-factoryUserStory
+ createUserStory(userStoryCreationDto,sprints)
-isUserStoryUnique(userStory)
+getUserStories()
+getUserStoryByNumber(userStoryNumber)
+removeUserStory(userStory)
}

class "SprintBacklog" {
-userStories
-factoryUserStory
+estimateEffortUserStory(userStoryDto, effort)
+addUserStory(userStory)
-isUserStoryAlreadyAdded(userStory)
+getUserStories()
+hasUserStory(userStoryNumber)
}

class "UserStory"{
-effort
-userStoryNumber
-actor
-userStoryText
-status
-listOfAcceptanceCriteria
-projectCode
+UserStory(userStoryNumber, actor, userStoryText)
+hasUserStoryNumber(userStoryNumber)
+setEffort(effort)
+getUsNumber()
+getUsStatus()
+setUsStatus()
+getUsText()
+getActor()
+getProjectCode()
+UserStory(projectCode,userStoryNumber, actor, userStoryText)
+estimateEffortUserStory(userStoryDto, effort)
}

class AccountMapper {
+accountToDTO(account)
+listAccountsToDTO(accounts)
}

class ProjectMapper {
+ getProjectFromDTO(ProjectCreationDto)
}

class UserStoryDtoMapper {
+userStoriesToDto(userStory)
}

class UserStoryDtoListAssembler {
+backlogToDto(productBacklog)
}

class AccountDTO {
+name
+email
+status
+AccountDTO(name, email, status)
}

class ProjectDto {
+projectCode
+name
+customer
+status
+projectTypology
+businessSector
+ProjectDto(code, name, customer, status, projectTypology, businessSector)
}

class ProjectCreationDto {
+code
+name
+customerName
+customerNif
+status
+projectTypology
+businessSector
+ProjectCreationDto(code, name, customerName, customerNif, projectTypology, businessSector)
}

class "UserStoryCreationDto"{
+userStoryNumber
+actor
+userStoryText
}

class UserStoryDto {
+userStoryNumber
+userStoryText
+status
}

class FactoryPeriod {
+create(startDate, sprintDuration)
}

class FactorySprint {
+createSprint(startDate, sprintDuration)
}

interface "FactoryUserStory"{
createUserStory( userStoryNumber, userStoryText, actor)
}

enum "Effort"{
-effortValue
+Effort(effortValue)
}

enum "Status"{
-status
+Status(status)
}

'Controller Company link'
'US016'
"ListProjectInAccountController"-->"Company"
'US015'
"GetListOfProjectsController" "1"-->"1" "Company": has
'US014'
"ListAccountsInProjectController" --> "Company"
'US011_US012_US013'
"AddUserToProjectController" "1"-->"1" "Company" :has
“ListAllUsersController” "1"-->"1" "Company" :has
“ListProjectsInAccountController” "1"-->"1" "Company" :has
'US010'
"RegisterProjectController" "1"-->"1" "Company": has
'US009'
"AddCustomerController" "1"-->"1" "Company" : has
'US008'
"AddBusinessSectorController" "1"-->"1" "Company" : has
'US007'
"CreateProjectTypologyController""1"-->"1" "Company": has
'US006' 'US005'
"ChangeStatusController" --> "Company"
'US004'
"ListAccountController" --> "Company"
'US003'
"ChangeProfileController" "1"-->"1" "Company"
'US002'
"RegisterAccountController" "1" --> "1" "Company": has
'US001'
"CreateProfileController" "1"-->"1"  "Company" : has
'US017'
"CreateUserStoryController""1"-->"1" "Company"
'US018'
"GetProductBacklogController" "1"-->"1" "Company": has
"GetProductBacklogController" ..> "UserStoryDtoListAssembler"
'US019'
CreateSprintController "1"-->"1" Company: has
'US020'
"AddUserStoryToSprintBacklogController" "1"-->"1" "Company": has
'US021'
"EstimateUserStoryEffortController" "1" --> "1" "Company"
'US022'
"ViewScrumBoardController" --> "Company"
"ViewScrumBoardController" .--> "UserStoryDtoListAssembler"

'Has Assembler link'
"UserStoryDtoListAssembler" ..> "UserStoryDtoMapper"

'Has Mapper link'
'US016'
"ListProjectInAccountController"..> "ProjectMapper"
'US015'
"GetListOfProjectsController" ..> "ProjectMapper"
"ProjectMapper" ..> "ProjectDto": <<instantiate>>
'US014'
"ListAccountsInProjectController" ..> "AccountMapper"
"AccountMapper" ..> "AccountDTO"
"AccountMapper"..>"Account"
'US010'
"ProjectMapper" ..> "ProjectCreationDto"
"ProjectContainer" ..> "ProjectMapper"
"RegisterProjectController" ..> "ProjectMapper"
"ProjectMapper" ..> "Project"
"UserStoryDtoMapper" ..> "UserStory"

'Company Containers link'
"Company" "1"-->"1" "ProfileContainer": has
"Company" "1"-->"1" "AccountContainer" : has
"Company" "1"-->"1" "ProjectTypologyContainer" : has
"Company" "1"-->"1"  "BusinessSectorContainer"
"Company" "1"-->"1" "CustomerContainer": has
"Company" "1"-->"1" "AccountInProjectContainer": has
"Company" "1"--> "1" "ProjectContainer": has
"Company" "1"--> "1" "UserStoryContainer": has

'Container model link'
"ProfileContainer" "1" --> "*" "Profile": contains
"AccountContainer" "1"--> "*" "Account" :has
"ProjectTypologyContainer" "1"-->"*" "ProjectTypology" : has
"BusinessSectorContainer" "1"-->"*"  "BusinessSector"
"CustomerContainer" "1"-->"*" "Customer": has
"AccountInProjectContainer" "1"--> "*" "AccountInProject" : has
"ProjectContainer" .--> "ProjectDto": accesses
"ProjectContainer" "1" -left-> "*" "Project" : contains


'Account Profile Link'
"Account" "*"--> "1""Profile": contains

'AccountInProject Project link'
"AccountInProject" "*"-->"1""Project": contains

'Project Link'
"Project" "1" --> "*" "Sprint"
"Project" "1" -->"1" "ProductBacklog": has
"Project" "1"-->"1" "FactorySprint": has

'ProductBacklog Link'
"ProductBacklog" "1" --> "*" "UserStory" : contains
"ProductBacklog" "1" --> "1""FactoryUserStory"
"ProductBacklog" "1" ..> "*""Sprint"

'Sprint Link'
"Sprint" "1" --> "1" "SprintBacklog"
"Sprint" -> "FactoryPeriod"

'SprintBacklog Link'
"SprintBacklog" "1" --> "*" "UserStory" : contains

'UserStory Link'
"UserStory" "1" --> "1" "Effort" : has
"UserStory" "1" --> "1" "Status" : has

'FactorySprint Link'
FactorySprint "1"..> "*"Sprint

'FactoryPeriod Link'
"FactoryPeriod" ..> "Period"

'FactoryUserStory Link'
"FactoryUserStory" .--> "UserStory"

'Dto Link'
"UserStoryDtoMapper" .--> "UserStoryDto": instantiates
"UserStoryCreationDto"<.."UserStoryContainer"

@enduml